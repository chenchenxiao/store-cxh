<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 配置mybatis的缓存，延迟加载等等一系列属性 -->
    <settings>

        <!-- 全局映射器启用缓存 -->
        <setting name="cacheEnabled" value="true"/>

        <!-- 查询时，关闭关联对象即时加载以提高性能，默认为false -->
        <setting name="lazyLoadingEnabled" value="true"/>

        <!--允许单个sql语句能够返回不同的结果集，达到通用的效果，默认为true -->
        <setting name="multipleResultSetsEnabled" value="true"/>

        <!-- 使用log4j2來记录日志，输出sql语句-->
        <setting name="logImpl" value="STDOUT_LOGGING"/>

        <!-- 允许使用列标签代替列名，默认是true -->
        <setting name="useColumnLabel" value="true"/>

        <!-- 不允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖
             默认值是false，如果是true的话，在写insert语句是就可以把新生成的主键赋值到keyproperty指定的值
         -->
        <setting name="useGeneratedKeys" value="true"/>

        <!-- 给予被嵌套的resultMap以字段-属性的映射支持 FULL,PARTIAL ，默认是PARTIAL
             PARTIAL只会自动映射简单，没有嵌套的结果，
             FULL会自动映射任何复杂的结果
        -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>

        <!-- 对于批量更新操作缓存SQL以提高性能 BATCH,SIMPLE，
             SIMPLE没有什么特别之处
             REUSE 执行器重用 预处理语句
             BATCH 执行器重用语句 和批量更新 -->
        <setting name="defaultExecutorType" value="SIMPLE" />

        <!-- 数据库超过25000秒仍未响应则超时 -->
        <!-- <setting name="defaultStatementTimeout" value="25000" /> -->

        <!-- 允许使用RowBounds 嵌套语句-->
        <setting name="safeRowBoundsEnabled" value="false"/>

        <!--使数据库中的列格式为a_name可以自动映射到实体类中的aName -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>

        <!--mybatis使用本地缓存来避免循环引用，即多次执行同一条sql语句，能加快重复查询，也就是一级缓存
            如果配置为STATEMENT ，就无法使用一级缓存
        -->
        <setting name="localCacheScope" value="SESSION"/>

        <!-- Specifies the JDBC type for null values when no specific JDBC type was provided for the parameter. Some drivers require specifying the column JDBC type but others work with generic values
            like NULL, VARCHAR or OTHER. -->
        <setting name="jdbcTypeForNull" value="OTHER"/>

        <!-- Specifies which Object's methods trigger a lazy load
             指定对象的方法触发延迟加载
        -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>

        <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 -->
        <setting name="aggressiveLazyLoading" value="false"/>

    </settings>



    <!-- 分页插件 -->
    <plugins>
        <plugin interceptor="com.github.abel533.mapperhelper.MapperInterceptor">
            <!--================================================-->
            <!--可配置参数说明(一般无需修改)-->
            <!--================================================-->
            <!--UUID生成策略-->
            <!--配置UUID生成策略需要使用OGNL表达式-->
            <!--默认值32位长度:@java.util.UUID@randomUUID().toString().replace("-", "")-->
            <!--<property name="UUID" value="@java.util.UUID@randomUUID().toString()"/>-->
            <!--主键自增回写方法,默认值CALL IDENTITY(),适应于大多数数据库-->
            <!--<property name="IDENTITY" value="CALL IDENTITY()"/>-->
            <!--主键自增回写方法执行顺序,默认AFTER,可选值为(BEFORE|AFTER)-->
            <!--<property name="ORDER" value="AFTER"/>-->
        </plugin>
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <property name="reasonable" value="true"/>
            <property name="supportMethodsArguments" value="true"/>
            <property name="returnPageInfo" value="check"/>
            <property name="params" value="count=countSql"/>
        </plugin>
    </plugins>

</configuration>